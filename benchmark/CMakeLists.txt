set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${PROJECT_BINARY_DIR}/benchmarks)

set(benchbin "")

macro(add_benchmark source_name)
    add_executable(${source_name} ${source_name}.cpp utils.cpp benchmark.cpp subcircuits.cpp)
    if(MSVC)
        target_compile_options(${source_name} PRIVATE /W4 /WX)
    else()
        target_compile_options(${source_name} PRIVATE -Wall -Wextra -Wpedantic)
    endif()
    target_link_libraries(${source_name} Boost::system Boost::program_options nlohmann_json::nlohmann_json MultiCent Threads::Threads NTL GMP EMPTool)
    list(APPEND benchbin ${source_name})
endmacro()

add_benchmark(test)
add_benchmark(shuffle)
add_benchmark(doubleshuffle)
add_benchmark(equalszero)
add_benchmark(compaction)
add_benchmark(sort)
add_benchmark(pi_3_test)
add_benchmark(pi_3_benchmark)
add_benchmark(pi_3_ref_test)
add_benchmark(pi_3_ref_benchmark)
add_benchmark(pi_2_test)
add_benchmark(pi_2_benchmark)
add_benchmark(pi_2_ref_test)
add_benchmark(pi_2_ref_benchmark)
add_benchmark(pi_1_test)
add_benchmark(pi_1_benchmark)
add_benchmark(pi_1_ref_test)
add_benchmark(pi_1_ref_benchmark)

add_custom_target(benchmarks)
add_dependencies(benchmarks ${benchbin})

file(COPY ../certs DESTINATION ${PROJECT_BINARY_DIR}/benchmarks)
file(COPY ../run_test.sh DESTINATION ${PROJECT_BINARY_DIR}/benchmarks)
file(COPY ../run_LAN_benchmarks.sh DESTINATION ${PROJECT_BINARY_DIR}/benchmarks)
file(COPY ../run_WAN_benchmarks.sh DESTINATION ${PROJECT_BINARY_DIR}/benchmarks)
